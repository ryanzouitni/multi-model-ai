from flask import Flask, render_template, request, jsonify
import openai
import os
import requests
from dotenv import load_dotenv

load_dotenv()

# Load API keys
openai.api_key = os.getenv("OPENAI_API_KEY")
gemini_api_key = os.getenv("GEMINI_API_KEY")
claude_api_key = os.getenv("CLAUDE_API_KEY")

app = Flask(__name__)

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/generate", methods=["POST"])
def generate():
    data = request.get_json()
    prompt = data["prompt"]
    model = data["model"]

    try:
        if model == "chatgpt":
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            result = response.choices[0].message.content

        elif model == "gemini":
            gemini_url = "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent"
            headers = {"Content-Type": "application/json"}
            payload = {
                "contents": [{"parts": [{"text": prompt}]}]
            }

            gemini_response = requests.post(
                f"{gemini_url}?key={gemini_api_key}",
                headers=headers,
                json=payload
            )
            gemini_data = gemini_response.json()
            result = gemini_data["candidates"][0]["content"]["parts"][0]["text"]

        elif model == "claude":
            claude_url = "https://api.anthropic.com/v1/messages"
            headers = {
                "x-api-key": claude_api_key,
                "anthropic-version": "2023-06-01",
                "content-type": "application/json"
            }
            payload = {
                "model": "claude-3-haiku-20240307",
                "max_tokens": 300,
                "messages": [
                    {"role": "user", "content": prompt}
                ]
            }

            claude_response = requests.post(claude_url, headers=headers, json=payload)
            claude_data = claude_response.json()
            result = claude_data["content"][0]["text"]

        else:
            result = "Invalid model selected."

        return jsonify({"response": result})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)